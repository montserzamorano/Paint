/**
 *
 * @author Montserrat Rodríguez Zamorano
 */

package paint;

import graficos.Figura;
import graficos.Forma;
import iu.ColorRenderer;
import iu.Lienzo;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.Rectangle;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import sm.sound.SMClipPlayer;
import sm.sound.SMSoundRecorder;
import graficos.TipoRelleno;
import iu.RellenoRenderer;
import graficos.TipoLinea;

public class VentanaPrincipal extends javax.swing.JFrame {
    private File temp = null;
    SMSoundRecorder recorder = null;
    SMClipPlayer player = null;
    private boolean grabando = false;
    /**
     * Creates new form VentanaPrincipal
     */
    public VentanaPrincipal() {
        initComponents();
        
        inicializarColores(colorTrazoCB);
        inicializarColores(colorRellenoCB);
        inicializarColores(degradado1CB);
        inicializarColores(degradado2CB);
        inicializarRelleno(tipoDegradadoCB);
        
        tipoLineaCB.addItem(TipoLinea.CONTINUA);
        tipoLineaCB.addItem(TipoLinea.DISCONTINUA);
        tipoLineaCB.addItem(TipoLinea.PUNTEADA);
        
        transparenciaSlider.setEnabled(false);
        
        //botones de sonido
        stopRecordBoton.setEnabled(false);
        pausaGrabacionBoton.setEnabled(false);
        
    }
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        formasBG = new javax.swing.ButtonGroup();
        sonidoBG = new javax.swing.ButtonGroup();
        upperToolBar = new javax.swing.JToolBar();
        lineaBoton = new javax.swing.JToggleButton();
        rectanguloBoton = new javax.swing.JToggleButton();
        elipseBoton = new javax.swing.JToggleButton();
        FigurasCB = new javax.swing.JComboBox<>();
        jSeparator1 = new javax.swing.JToolBar.Separator();
        colorTrazoCB = new javax.swing.JComboBox<>();
        jSeparator7 = new javax.swing.JToolBar.Separator();
        rellenarBoton = new javax.swing.JToggleButton();
        colorRellenoCB = new javax.swing.JComboBox<>();
        tipoDegradadoCB = new javax.swing.JComboBox<>();
        degradado1CB = new javax.swing.JComboBox<>();
        degradado2CB = new javax.swing.JComboBox<>();
        jSeparator6 = new javax.swing.JToolBar.Separator();
        transparenciaBoton = new javax.swing.JToggleButton();
        transparenciaSlider = new javax.swing.JSlider();
        jSeparator8 = new javax.swing.JToolBar.Separator();
        alisarBoton = new javax.swing.JToggleButton();
        jSeparator2 = new javax.swing.JToolBar.Separator();
        grosorSpinner = new javax.swing.JSpinner();
        tipoLineaCB = new javax.swing.JComboBox<>();
        jSeparator3 = new javax.swing.JToolBar.Separator();
        jPanel1 = new javax.swing.JPanel();
        panelAccion = new javax.swing.JPanel();
        jToolBar1 = new javax.swing.JToolBar();
        recordSonidoBoton = new javax.swing.JToggleButton();
        pausaGrabacionBoton = new javax.swing.JToggleButton();
        stopRecordBoton = new javax.swing.JToggleButton();
        listaAudiosCB = new javax.swing.JComboBox<>();
        reproducirSonidoBoton = new javax.swing.JToggleButton();
        pausaSonidoBoton = new javax.swing.JToggleButton();
        stopSonidoBoton = new javax.swing.JToggleButton();
        jSeparator4 = new javax.swing.JToolBar.Separator();
        escritorio = new javax.swing.JDesktopPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        menuBar = new javax.swing.JMenuBar();
        archivoMenuBar = new javax.swing.JMenu();
        nuevoMenuItem = new javax.swing.JMenuItem();
        abrirMenuItem = new javax.swing.JMenuItem();
        guardarMenuItem = new javax.swing.JMenuItem();
        verMenuBar = new javax.swing.JMenu();
        ayudaMenuBar = new javax.swing.JMenu();
        acercaMenuItem = new javax.swing.JMenuItem();

        FormListener formListener = new FormListener();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        upperToolBar.setRollover(true);
        upperToolBar.setMaximumSize(new java.awt.Dimension(50, 30));
        upperToolBar.setMinimumSize(new java.awt.Dimension(50, 30));
        upperToolBar.setPreferredSize(new java.awt.Dimension(50, 30));

        formasBG.add(lineaBoton);
        lineaBoton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/linea.png"))); // NOI18N
        lineaBoton.setToolTipText("Línea");
        lineaBoton.setFocusable(false);
        lineaBoton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        lineaBoton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        lineaBoton.addActionListener(formListener);
        upperToolBar.add(lineaBoton);

        formasBG.add(rectanguloBoton);
        rectanguloBoton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/rectangulo.png"))); // NOI18N
        rectanguloBoton.setToolTipText("Rectángulo");
        rectanguloBoton.setFocusable(false);
        rectanguloBoton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        rectanguloBoton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        rectanguloBoton.addActionListener(formListener);
        upperToolBar.add(rectanguloBoton);

        formasBG.add(elipseBoton);
        elipseBoton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/elipse.png"))); // NOI18N
        elipseBoton.setToolTipText("Elipse");
        elipseBoton.setFocusable(false);
        elipseBoton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        elipseBoton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        elipseBoton.addActionListener(formListener);
        upperToolBar.add(elipseBoton);

        FigurasCB.setToolTipText("Figuras dibujadas");
        FigurasCB.setMaximumSize(new java.awt.Dimension(100, 32767));
        FigurasCB.setMinimumSize(new java.awt.Dimension(100, 27));
        FigurasCB.setPreferredSize(new java.awt.Dimension(100, 27));
        upperToolBar.add(FigurasCB);
        upperToolBar.add(jSeparator1);

        colorTrazoCB.setMaximumSize(new java.awt.Dimension(60, 32767));
        colorTrazoCB.setMinimumSize(new java.awt.Dimension(60, 27));
        colorTrazoCB.setPreferredSize(new java.awt.Dimension(60, 27));
        colorTrazoCB.addActionListener(formListener);
        upperToolBar.add(colorTrazoCB);
        upperToolBar.add(jSeparator7);

        rellenarBoton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/rellenar.png"))); // NOI18N
        rellenarBoton.setToolTipText("Relleno");
        rellenarBoton.setFocusable(false);
        rellenarBoton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        rellenarBoton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        rellenarBoton.addActionListener(formListener);
        upperToolBar.add(rellenarBoton);

        colorRellenoCB.setToolTipText("Color relleno");
        colorRellenoCB.setMaximumSize(new java.awt.Dimension(60, 32767));
        colorRellenoCB.setMinimumSize(new java.awt.Dimension(60, 27));
        colorRellenoCB.setPreferredSize(new java.awt.Dimension(60, 27));
        colorRellenoCB.addActionListener(formListener);
        upperToolBar.add(colorRellenoCB);

        tipoDegradadoCB.setToolTipText("Tipo relleno");
        tipoDegradadoCB.setMaximumSize(new java.awt.Dimension(150, 32767));
        tipoDegradadoCB.setMinimumSize(new java.awt.Dimension(150, 27));
        tipoDegradadoCB.setPreferredSize(new java.awt.Dimension(200, 27));
        tipoDegradadoCB.addActionListener(formListener);
        upperToolBar.add(tipoDegradadoCB);

        degradado1CB.setToolTipText("Primer color degradado");
        degradado1CB.setMaximumSize(new java.awt.Dimension(60, 32767));
        degradado1CB.setMinimumSize(new java.awt.Dimension(60, 27));
        degradado1CB.setPreferredSize(new java.awt.Dimension(60, 27));
        degradado1CB.addActionListener(formListener);
        upperToolBar.add(degradado1CB);

        degradado2CB.setToolTipText("Segundo color degradado");
        degradado2CB.setMaximumSize(new java.awt.Dimension(60, 32767));
        degradado2CB.setMinimumSize(new java.awt.Dimension(60, 27));
        degradado2CB.setPreferredSize(new java.awt.Dimension(60, 27));
        degradado2CB.addActionListener(formListener);
        upperToolBar.add(degradado2CB);
        upperToolBar.add(jSeparator6);

        transparenciaBoton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/transparencia.png"))); // NOI18N
        transparenciaBoton.setToolTipText("Transparencia");
        transparenciaBoton.setFocusable(false);
        transparenciaBoton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        transparenciaBoton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        transparenciaBoton.addActionListener(formListener);
        upperToolBar.add(transparenciaBoton);

        transparenciaSlider.setToolTipText("Nivel transparencia");
        transparenciaSlider.setValue(100);
        transparenciaSlider.setMaximumSize(new java.awt.Dimension(100, 29));
        transparenciaSlider.setMinimumSize(new java.awt.Dimension(100, 29));
        transparenciaSlider.setPreferredSize(new java.awt.Dimension(100, 29));
        transparenciaSlider.addChangeListener(formListener);
        upperToolBar.add(transparenciaSlider);
        upperToolBar.add(jSeparator8);

        alisarBoton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/alisar.png"))); // NOI18N
        alisarBoton.setToolTipText("Alisado");
        alisarBoton.setFocusable(false);
        alisarBoton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        alisarBoton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        alisarBoton.addActionListener(formListener);
        upperToolBar.add(alisarBoton);
        upperToolBar.add(jSeparator2);

        grosorSpinner.setToolTipText("Grosor línea");
        grosorSpinner.setMaximumSize(new java.awt.Dimension(40, 32767));
        grosorSpinner.setMinimumSize(new java.awt.Dimension(40, 26));
        grosorSpinner.setPreferredSize(new java.awt.Dimension(40, 26));
        grosorSpinner.setValue(1);
        grosorSpinner.addChangeListener(formListener);
        upperToolBar.add(grosorSpinner);

        tipoLineaCB.setMaximumSize(new java.awt.Dimension(100, 32767));
        tipoLineaCB.setMinimumSize(new java.awt.Dimension(100, 27));
        tipoLineaCB.setPreferredSize(new java.awt.Dimension(100, 27));
        upperToolBar.add(tipoLineaCB);
        upperToolBar.add(jSeparator3);

        getContentPane().add(upperToolBar, java.awt.BorderLayout.PAGE_START);

        jPanel1.setMaximumSize(new java.awt.Dimension(200, 100));
        jPanel1.setMinimumSize(new java.awt.Dimension(200, 100));
        jPanel1.setPreferredSize(new java.awt.Dimension(200, 100));
        jPanel1.setLayout(new java.awt.BorderLayout());

        panelAccion.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        panelAccion.setMaximumSize(new java.awt.Dimension(20, 30));
        panelAccion.setMinimumSize(new java.awt.Dimension(20, 30));
        panelAccion.setPreferredSize(new java.awt.Dimension(20, 30));

        javax.swing.GroupLayout panelAccionLayout = new javax.swing.GroupLayout(panelAccion);
        panelAccion.setLayout(panelAccionLayout);
        panelAccionLayout.setHorizontalGroup(
            panelAccionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1407, Short.MAX_VALUE)
        );
        panelAccionLayout.setVerticalGroup(
            panelAccionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 26, Short.MAX_VALUE)
        );

        jPanel1.add(panelAccion, java.awt.BorderLayout.PAGE_END);

        jToolBar1.setRollover(true);

        sonidoBG.add(recordSonidoBoton);
        recordSonidoBoton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/record24x24.png"))); // NOI18N
        recordSonidoBoton.setToolTipText("Iniciar grabación");
        recordSonidoBoton.setFocusable(false);
        recordSonidoBoton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        recordSonidoBoton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        recordSonidoBoton.addActionListener(formListener);
        jToolBar1.add(recordSonidoBoton);

        sonidoBG.add(pausaGrabacionBoton);
        pausaGrabacionBoton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/pausa24x24.png"))); // NOI18N
        pausaGrabacionBoton.setToolTipText("Pausar grabación");
        pausaGrabacionBoton.setFocusable(false);
        pausaGrabacionBoton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        pausaGrabacionBoton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        pausaGrabacionBoton.addActionListener(formListener);
        jToolBar1.add(pausaGrabacionBoton);

        sonidoBG.add(stopRecordBoton);
        stopRecordBoton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/stopRecord24x24.png"))); // NOI18N
        stopRecordBoton.setToolTipText("Finalizar grabación");
        stopRecordBoton.setFocusable(false);
        stopRecordBoton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        stopRecordBoton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        stopRecordBoton.addActionListener(formListener);
        jToolBar1.add(stopRecordBoton);

        listaAudiosCB.setToolTipText("Lista de sonidos");
        listaAudiosCB.setMaximumSize(new java.awt.Dimension(100, 32767));
        listaAudiosCB.setMinimumSize(new java.awt.Dimension(100, 27));
        jToolBar1.add(listaAudiosCB);

        sonidoBG.add(reproducirSonidoBoton);
        reproducirSonidoBoton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/Play.png"))); // NOI18N
        reproducirSonidoBoton.setToolTipText("Play");
        reproducirSonidoBoton.setFocusable(false);
        reproducirSonidoBoton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        reproducirSonidoBoton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        reproducirSonidoBoton.addActionListener(formListener);
        jToolBar1.add(reproducirSonidoBoton);

        sonidoBG.add(pausaSonidoBoton);
        pausaSonidoBoton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/Pausa.png"))); // NOI18N
        pausaSonidoBoton.setToolTipText("Pausa");
        pausaSonidoBoton.setFocusable(false);
        pausaSonidoBoton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        pausaSonidoBoton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        pausaSonidoBoton.addActionListener(formListener);
        jToolBar1.add(pausaSonidoBoton);

        sonidoBG.add(stopSonidoBoton);
        stopSonidoBoton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/stop24x24.png"))); // NOI18N
        stopSonidoBoton.setToolTipText("Stop");
        stopSonidoBoton.setFocusable(false);
        stopSonidoBoton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        stopSonidoBoton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        stopSonidoBoton.addActionListener(formListener);
        jToolBar1.add(stopSonidoBoton);
        jToolBar1.add(jSeparator4);

        jPanel1.add(jToolBar1, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel1, java.awt.BorderLayout.PAGE_END);

        jScrollPane1.setViewportView(jTextPane1);

        escritorio.add(jScrollPane1);

        getContentPane().add(escritorio, java.awt.BorderLayout.CENTER);

        archivoMenuBar.setText("Archivo");

        nuevoMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/nuevo.png"))); // NOI18N
        nuevoMenuItem.setText("Nuevo");
        nuevoMenuItem.addActionListener(formListener);
        archivoMenuBar.add(nuevoMenuItem);

        abrirMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/abrir.png"))); // NOI18N
        abrirMenuItem.setText("Abrir");
        abrirMenuItem.addActionListener(formListener);
        archivoMenuBar.add(abrirMenuItem);

        guardarMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/guardar.png"))); // NOI18N
        guardarMenuItem.setText("Guardar");
        guardarMenuItem.addActionListener(formListener);
        archivoMenuBar.add(guardarMenuItem);

        menuBar.add(archivoMenuBar);

        verMenuBar.setText("Ver");
        menuBar.add(verMenuBar);

        ayudaMenuBar.setText("Ayuda");

        acercaMenuItem.setText("Acerca de");
        acercaMenuItem.addActionListener(formListener);
        ayudaMenuBar.add(acercaMenuItem);

        menuBar.add(ayudaMenuBar);

        setJMenuBar(menuBar);

        pack();
    }

    // Code for dispatching events from components to event handlers.

    private class FormListener implements java.awt.event.ActionListener, javax.swing.event.ChangeListener {
        FormListener() {}
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            if (evt.getSource() == lineaBoton) {
                VentanaPrincipal.this.lineaBotonActionPerformed(evt);
            }
            else if (evt.getSource() == rectanguloBoton) {
                VentanaPrincipal.this.rectanguloBotonActionPerformed(evt);
            }
            else if (evt.getSource() == elipseBoton) {
                VentanaPrincipal.this.elipseBotonActionPerformed(evt);
            }
            else if (evt.getSource() == colorTrazoCB) {
                VentanaPrincipal.this.colorTrazoCBActionPerformed(evt);
            }
            else if (evt.getSource() == rellenarBoton) {
                VentanaPrincipal.this.rellenarBotonActionPerformed(evt);
            }
            else if (evt.getSource() == tipoDegradadoCB) {
                VentanaPrincipal.this.tipoDegradadoCBActionPerformed(evt);
            }
            else if (evt.getSource() == colorRellenoCB) {
                VentanaPrincipal.this.colorRellenoCBActionPerformed(evt);
            }
            else if (evt.getSource() == transparenciaBoton) {
                VentanaPrincipal.this.transparenciaBotonActionPerformed(evt);
            }
            else if (evt.getSource() == alisarBoton) {
                VentanaPrincipal.this.alisarBotonActionPerformed(evt);
            }
            else if (evt.getSource() == recordSonidoBoton) {
                VentanaPrincipal.this.recordSonidoBotonActionPerformed(evt);
            }
            else if (evt.getSource() == pausaGrabacionBoton) {
                VentanaPrincipal.this.pausaGrabacionBotonActionPerformed(evt);
            }
            else if (evt.getSource() == stopRecordBoton) {
                VentanaPrincipal.this.stopRecordBotonActionPerformed(evt);
            }
            else if (evt.getSource() == reproducirSonidoBoton) {
                VentanaPrincipal.this.reproducirSonidoBotonActionPerformed(evt);
            }
            else if (evt.getSource() == pausaSonidoBoton) {
                VentanaPrincipal.this.pausaSonidoBotonActionPerformed(evt);
            }
            else if (evt.getSource() == stopSonidoBoton) {
                VentanaPrincipal.this.stopSonidoBotonActionPerformed(evt);
            }
            else if (evt.getSource() == nuevoMenuItem) {
                VentanaPrincipal.this.nuevoMenuItemActionPerformed(evt);
            }
            else if (evt.getSource() == abrirMenuItem) {
                VentanaPrincipal.this.abrirMenuItemActionPerformed(evt);
            }
            else if (evt.getSource() == guardarMenuItem) {
                VentanaPrincipal.this.guardarMenuItemActionPerformed(evt);
            }
            else if (evt.getSource() == acercaMenuItem) {
                VentanaPrincipal.this.acercaMenuItemActionPerformed(evt);
            }
            else if (evt.getSource() == degradado1CB) {
                VentanaPrincipal.this.degradado1CBActionPerformed(evt);
            }
            else if (evt.getSource() == degradado2CB) {
                VentanaPrincipal.this.degradado2CBActionPerformed(evt);
            }
        }

        public void stateChanged(javax.swing.event.ChangeEvent evt) {
            if (evt.getSource() == transparenciaSlider) {
                VentanaPrincipal.this.transparenciaSliderStateChanged(evt);
            }
            else if (evt.getSource() == grosorSpinner) {
                VentanaPrincipal.this.grosorSpinnerStateChanged(evt);
            }
        }
    }// </editor-fold>//GEN-END:initComponents

    private void inicializarColores(javax.swing.JComboBox<Color> cb){
        cb.addItem(Color.BLACK);
        cb.addItem(Color.RED);
        cb.addItem(Color.BLUE);
        cb.addItem(Color.GREEN);
        cb.addItem(Color.WHITE);
        cb.addItem(Color.YELLOW);
        cb.setRenderer(new ColorRenderer());
    }
    
    private void inicializarRelleno(javax.swing.JComboBox<TipoRelleno> cb){
        cb.addItem(TipoRelleno.NINGUNO);
        cb.addItem(TipoRelleno.LISO);
        cb.addItem(TipoRelleno.DEGRADADO_HORIZONTAL);
        cb.addItem(TipoRelleno.DEGRADADO_VERTICAL);
        cb.addItem(TipoRelleno.DEGRADADO_DIAGONAL);
        cb.setRenderer(new RellenoRenderer());
    }
    
    private void nuevoMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nuevoMenuItemActionPerformed
        VentanaInterna vi = new VentanaInterna();
        escritorio.add(vi);
        
        BufferedImage img;
        String hS = JOptionPane.showInputDialog(null, "Introduzca altura de la imagen", "300");
        int h = new Integer(hS);
        String wS = JOptionPane.showInputDialog(null, "Introduzca ancho de la imagen", "300");
        int w = new Integer(wS);

        img = new BufferedImage(w,h, BufferedImage.TYPE_INT_RGB);
        //rellenar la imagen de blanco
        Graphics2D g2d;
        g2d = img.createGraphics();
        g2d.setColor(Color.WHITE);
        Rectangle r = new Rectangle(new Dimension(w,h));
        g2d.fill(r);
        g2d.clip(r);
        vi.getLienzo().setImage(img);
        vi.setTitle("Nueva");
        vi.setVisible(true);
    }//GEN-LAST:event_nuevoMenuItemActionPerformed

    private void guardarMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardarMenuItemActionPerformed
        VentanaInterna vi = (VentanaInterna) escritorio.getSelectedFrame();
        if(vi!=null){
            JFileChooser dlg = new JFileChooser();
            int resp = dlg.showSaveDialog(this);
            if(resp == JFileChooser.APPROVE_OPTION){
                try{
                    //BufferedImage img = vi.getLienzo().getImage(true);
                    
                }catch(Exception ex){
                    System.err.println("Error al guardar la imagen.");
                }
            }
        }
    }//GEN-LAST:event_guardarMenuItemActionPerformed

    private void abrirMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_abrirMenuItemActionPerformed
        JFileChooser dlg = new JFileChooser();
        
        //dlg.setFileFilter();
        
        int resp = dlg.showOpenDialog(this);
        if(resp == JFileChooser.APPROVE_OPTION){
            try{
                File f = dlg.getSelectedFile();
                
            }catch(Exception ex){
                System.err.println("Error al leer el archivo.");
            }
        }
    }//GEN-LAST:event_abrirMenuItemActionPerformed

    private void acercaMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_acercaMenuItemActionPerformed
        String mensaje = "Paint\n14/06/2019 1.0\nMontserrat Rodríguez Zamorano";
        JOptionPane.showMessageDialog(null, mensaje, "Acerca de", JOptionPane.PLAIN_MESSAGE);
    }//GEN-LAST:event_acercaMenuItemActionPerformed

    private void lineaBotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lineaBotonActionPerformed
        VentanaInterna vi;
        vi = (VentanaInterna) escritorio.getSelectedFrame();
        if(vi!=null){
            vi.getLienzo().setForma(Forma.LINEA);
        }
    }//GEN-LAST:event_lineaBotonActionPerformed

    private void rectanguloBotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rectanguloBotonActionPerformed
        VentanaInterna vi;
        vi = (VentanaInterna) escritorio.getSelectedFrame();
        if(vi!=null){
            vi.getLienzo().setForma(Forma.RECTANGULO);
        }
    }//GEN-LAST:event_rectanguloBotonActionPerformed

    private void elipseBotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_elipseBotonActionPerformed
        VentanaInterna vi;
        vi = (VentanaInterna) escritorio.getSelectedFrame();
        if(vi!=null){
            vi.getLienzo().setForma(Forma.OVALO);
        }
    }//GEN-LAST:event_elipseBotonActionPerformed

    private void rellenarBotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rellenarBotonActionPerformed
        VentanaInterna vi;
        vi = (VentanaInterna) escritorio.getSelectedFrame();
        if(vi!=null){
            Lienzo l = vi.getLienzo();
            l.setRellenoActivated(!vi.getLienzo().getRellenoActivated());
            if(!vi.getLienzo().getRellenoActivated()){
                vi.getLienzo().setRelleno(null);
            }
        }
    }//GEN-LAST:event_rellenarBotonActionPerformed

    private void transparenciaBotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_transparenciaBotonActionPerformed
        VentanaInterna vi;
        vi = (VentanaInterna) escritorio.getSelectedFrame();
        if(vi!=null){
            Lienzo l = vi.getLienzo();
            //si la transparencia está activada
            if(l.getTransparenciaActivated()){
                l.setTransparenciaActivated(false);
                transparenciaSlider.setEnabled(false);
            }
            else{//si no está activada
                l.setTransparenciaActivated(true);
                transparenciaSlider.setEnabled(true);
            }
            vi.getLienzo().repaint();
        }
    }//GEN-LAST:event_transparenciaBotonActionPerformed

    private void alisarBotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_alisarBotonActionPerformed
        VentanaInterna vi;
        vi = (VentanaInterna) escritorio.getSelectedFrame();
        if(vi != null){
            Lienzo l = vi.getLienzo();
            //si la transparencia está activada
            if(l.getAlisadoActivated()){
                l.setAlisadoActivated(false);
            }
            else{//si no está activada
                l.setAlisadoActivated(true);
            }
        }
    }//GEN-LAST:event_alisarBotonActionPerformed

    private void recordSonidoBotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_recordSonidoBotonActionPerformed
        recordSonidoBoton.setEnabled(false);
        stopRecordBoton.setEnabled(true);
        pausaGrabacionBoton.setEnabled(true);
        try {
            temp = File.createTempFile("audioTemporal","wav");
        } catch (IOException ex) {
            System.err.println("Error al crear el archivo temporal");
        }
        grabando = true;
        recorder = new SMSoundRecorder(temp);
        recorder.record();
    }//GEN-LAST:event_recordSonidoBotonActionPerformed

    private void reproducirSonidoBotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reproducirSonidoBotonActionPerformed
        File f = (File) listaAudiosCB.getSelectedItem();
        if(f!=null){
            player = new SMClipPlayer(f);
            if(player!=null){
                player.play();
            }
        }
    }//GEN-LAST:event_reproducirSonidoBotonActionPerformed

    private void stopRecordBotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopRecordBotonActionPerformed
        recorder.stop();
        grabando = false;
        JFileChooser dlg = new JFileChooser();
        int resp = dlg.showSaveDialog(this);
        if(resp == JFileChooser.APPROVE_OPTION){
            try{
                File f = dlg.getSelectedFile();
                Files.copy(temp.toPath(), f.toPath());
                listaAudiosCB.addItem(f);
                temp = null;
            }catch(Exception e){
                System.err.println("Error al guardar la grabación");
            }
        }
    }//GEN-LAST:event_stopRecordBotonActionPerformed

    private void colorTrazoCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colorTrazoCBActionPerformed
        Color selectedColor = (Color) colorTrazoCB.getSelectedItem();
        VentanaInterna vi;
        vi = (VentanaInterna) escritorio.getSelectedFrame();
        if(vi != null){
            vi.getLienzo().setColorTrazo(selectedColor);
        }
    }//GEN-LAST:event_colorTrazoCBActionPerformed

    private void colorRellenoCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colorRellenoCBActionPerformed
        VentanaInterna vi;
        vi = (VentanaInterna) escritorio.getSelectedFrame();
        if(vi != null){
            if(vi.getLienzo().getRellenoActivated()){
                Color selectedColor = (Color) colorRellenoCB.getSelectedItem();
                vi.getLienzo().setColorRelleno(selectedColor);
            }
        }
    }//GEN-LAST:event_colorRellenoCBActionPerformed

    private void transparenciaSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_transparenciaSliderStateChanged
        VentanaInterna vi;
        vi = (VentanaInterna) escritorio.getSelectedFrame();
        if(vi != null){
            float transp = (float) (this.transparenciaSlider.getValue()*0.01);
            vi.getLienzo().setTransparencia(transp);
        }
    }//GEN-LAST:event_transparenciaSliderStateChanged

    private void grosorSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_grosorSpinnerStateChanged
        VentanaInterna vi;
        vi = (VentanaInterna) escritorio.getSelectedFrame();
        if(vi!=null){
            vi.getLienzo().setStroke(new BasicStroke((int) this.grosorSpinner.getValue()));
        }
    }//GEN-LAST:event_grosorSpinnerStateChanged

    private void pausaGrabacionBotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pausaGrabacionBotonActionPerformed
        //si está grabando, pausar
        if(grabando){
            recorder.stop();
            grabando = false;
        }//en otro caso renaudar la grabacion
        else{
            recorder.record();
            grabando = true;
        }
    }//GEN-LAST:event_pausaGrabacionBotonActionPerformed

    private void stopSonidoBotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopSonidoBotonActionPerformed
        File f = (File) listaAudiosCB.getSelectedItem();
        if(f!=null){
            if(player!=null){
                player.stop();
            }
        }
    }//GEN-LAST:event_stopSonidoBotonActionPerformed

    private void pausaSonidoBotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pausaSonidoBotonActionPerformed
        File f = (File) listaAudiosCB.getSelectedItem();
        if(f!=null){
            if(player!=null){
                player.pause();
            }
        }
    }//GEN-LAST:event_pausaSonidoBotonActionPerformed

    private void tipoDegradadoCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tipoDegradadoCBActionPerformed
        VentanaInterna vi;
        vi = (VentanaInterna) escritorio.getSelectedFrame();
        if(vi != null){
            if(vi.getLienzo().getRellenoActivated()){
                if(tipoDegradadoCB.getSelectedItem()==TipoRelleno.LISO){
                    Color selectedColor = (Color) colorRellenoCB.getSelectedItem();
                    vi.getLienzo().setColorRelleno(selectedColor);
                    vi.getLienzo().setTipoRelleno(TipoRelleno.LISO);
                }
                else if(tipoDegradadoCB.getSelectedItem()==TipoRelleno.DEGRADADO_HORIZONTAL){
                    vi.getLienzo().setTipoRelleno(TipoRelleno.DEGRADADO_HORIZONTAL);
                }
                else if(tipoDegradadoCB.getSelectedItem()==TipoRelleno.DEGRADADO_VERTICAL){
                    vi.getLienzo().setTipoRelleno(TipoRelleno.DEGRADADO_VERTICAL);
                }
                else if(tipoDegradadoCB.getSelectedItem()==TipoRelleno.DEGRADADO_DIAGONAL){
                    vi.getLienzo().setTipoRelleno(TipoRelleno.DEGRADADO_DIAGONAL);
                }
   
            }
            else{
                vi.getLienzo().setTipoRelleno(TipoRelleno.NINGUNO);
            }
        }
    }//GEN-LAST:event_tipoDegradadoCBActionPerformed

    private void degradado1CBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_degradado1CBActionPerformed
        VentanaInterna vi;
        vi = (VentanaInterna) escritorio.getSelectedFrame();
        if(vi != null){
            Color selectedColor = (Color) degradado1CB.getSelectedItem();
            vi.getLienzo().setColorDeg1(selectedColor);
        }
    }//GEN-LAST:event_degradado1CBActionPerformed

    private void degradado2CBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_degradado2CBActionPerformed
        VentanaInterna vi;
        vi = (VentanaInterna) escritorio.getSelectedFrame();
        if(vi != null){
            Color selectedColor = (Color) degradado2CB.getSelectedItem();
            vi.getLienzo().setColorDeg2(selectedColor);
        }
    }//GEN-LAST:event_degradado2CBActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VentanaPrincipal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<Figura> FigurasCB;
    private javax.swing.JMenuItem abrirMenuItem;
    private javax.swing.JMenuItem acercaMenuItem;
    private javax.swing.JToggleButton alisarBoton;
    private javax.swing.JMenu archivoMenuBar;
    private javax.swing.JMenu ayudaMenuBar;
    private javax.swing.JComboBox<Color> colorRellenoCB;
    private javax.swing.JComboBox<Color> colorTrazoCB;
    private javax.swing.JComboBox<Color> degradado1CB;
    private javax.swing.JComboBox<Color> degradado2CB;
    private javax.swing.JToggleButton elipseBoton;
    private javax.swing.JDesktopPane escritorio;
    private javax.swing.ButtonGroup formasBG;
    private javax.swing.JSpinner grosorSpinner;
    private javax.swing.JMenuItem guardarMenuItem;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JToolBar.Separator jSeparator1;
    private javax.swing.JToolBar.Separator jSeparator2;
    private javax.swing.JToolBar.Separator jSeparator3;
    private javax.swing.JToolBar.Separator jSeparator4;
    private javax.swing.JToolBar.Separator jSeparator6;
    private javax.swing.JToolBar.Separator jSeparator7;
    private javax.swing.JToolBar.Separator jSeparator8;
    private javax.swing.JTextPane jTextPane1;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JToggleButton lineaBoton;
    private javax.swing.JComboBox<File> listaAudiosCB;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem nuevoMenuItem;
    private javax.swing.JPanel panelAccion;
    private javax.swing.JToggleButton pausaGrabacionBoton;
    private javax.swing.JToggleButton pausaSonidoBoton;
    private javax.swing.JToggleButton recordSonidoBoton;
    private javax.swing.JToggleButton rectanguloBoton;
    private javax.swing.JToggleButton rellenarBoton;
    private javax.swing.JToggleButton reproducirSonidoBoton;
    private javax.swing.ButtonGroup sonidoBG;
    private javax.swing.JToggleButton stopRecordBoton;
    private javax.swing.JToggleButton stopSonidoBoton;
    private javax.swing.JComboBox<TipoRelleno> tipoDegradadoCB;
    private javax.swing.JComboBox<TipoLinea> tipoLineaCB;
    private javax.swing.JToggleButton transparenciaBoton;
    private javax.swing.JSlider transparenciaSlider;
    private javax.swing.JToolBar upperToolBar;
    private javax.swing.JMenu verMenuBar;
    // End of variables declaration//GEN-END:variables
}
