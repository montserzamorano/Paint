package paint;

import java.io.File;
import uk.co.caprica.vlcj.component.EmbeddedMediaPlayerComponent;
import uk.co.caprica.vlcj.player.MediaPlayerEventListener;
import uk.co.caprica.vlcj.player.embedded.EmbeddedMediaPlayer;

/**
 * Clase VentanaMultimediaVLCPlayer. Ventana multimedia que contiene vídeo.
 * @author Montserrat Rodríguez Zamorano
 * @version 1.1
 */
public class VentanaMultimediaVLCPlayer extends VentanaMultimedia {
    private EmbeddedMediaPlayer vlcplayer = null;
    private File fMedia;
    
    /**
     * Creates new form VentanaInternaVLCPlayer
     */
    public VentanaMultimediaVLCPlayer(File f) {
        initComponents();
        fMedia = f;
        EmbeddedMediaPlayerComponent aVisual = new EmbeddedMediaPlayerComponent();
        getContentPane().add(aVisual, java.awt.BorderLayout.CENTER);
        vlcplayer = aVisual.getMediaPlayer();
    }
    /**
     * Devuelve una instancia de VentanaMultimediaVLCPlayer
     * @param f File archivo a abrir
     * @return EmbeddeMediaPlayer vlcplayer
     */
    public static VentanaMultimediaVLCPlayer getInstance(File f){
        VentanaMultimediaVLCPlayer v = new VentanaMultimediaVLCPlayer(f);
        return(v.vlcplayer!=null?v:null);
    }
    /**
     * Comienza la reproducción del vídeo.
     */
    public void play(){
        if(vlcplayer!=null){
            if(vlcplayer.isPlayable()){
                //si se estaba reproduciendo
                vlcplayer.play();
            }
            else{
                vlcplayer.playMedia(fMedia.getAbsolutePath());
            }
        }
    }
    /**
     * Detiene la reproducción del vídeo.
     */
    public void stop(){
        if(vlcplayer!=null){
            if(vlcplayer != null){
                if(vlcplayer.isPlaying()){
                    vlcplayer.pause();
                }
                else{vlcplayer.stop();}
            }
        }
    }
    /**
     * Añade un manejador para poder gestionar eventos.
     * @param ml MediaPlayerEventListener manejador
     */
    public void addMediaPlayerEventListener(MediaPlayerEventListener ml){
        if(vlcplayer!=null){
            vlcplayer.addMediaPlayerEventListener(ml);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameClosing(evt);
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 501, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 383, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    /**
     * Gestiona el cierre de la ventana.
     * @param evt InternalFrameEvent
     */
    private void formInternalFrameClosing(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosing
        stop();
    }//GEN-LAST:event_formInternalFrameClosing


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
